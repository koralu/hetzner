// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma migrate dev --create-only
// npx prisma migrate dev
// npx prisma db seed

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CountryCode {
  AE
  AU
  BR
  CA
  DE
  ES
  FR
  IN
  IT
  JP
  MX
  NL
  SA
  SE
  SG
  TR
  GB
  US
}

enum Timeframe {
  Daily
  Weekly
  Monthly
  Quarterly
}

model Temps {
  department        String
  search_term       String @db.VarChar(500)
  rankV              String
  asin1             String
  product_title_1   String @map("#1 Product Title") @db.VarChar(500)
  click_share1      Float
  conversion_share1 Float
  asin2             String
  product_title_2   String @map("#2 Product Title") @db.VarChar(500)
  click_share2      Float
  conversion_share2 Float
  asin3             String
  product_title_3   String @map("#3 Product Title") @db.VarChar(500)
  click_share3      Float
  conversion_share3 Float
  id                Int    @id @default(autoincrement())

  @@map("temps")
  @@index([search_term], name: "search_term")
  @@index([asin1], name: "asin1")
  @@index([asin2], name: "asin2")
  @@index([asin3], name: "asin3")
}

model Department {
  id               Int                @id @default(autoincrement())
  name             String
  slug             String
  ignoredAt        DateTime?
  reports          Report[]
  departmentRanges DepartmentRanges[]

  @@unique([name])
  @@map("departments")
}

model DepartmentRanges {
  country      Country    @relation(fields: [countryId], references: [id])
  countryId    Int
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  timeframe    Timeframe
  startValidAt DateTime   @db.Date
  endValidAt   DateTime   @db.Date

  @@id([countryId, departmentId, timeframe])
  @@map("department_ranges")
}

model Country {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(50)
  code             CountryCode
  dateFormat       String             @db.VarChar(10)
  url              String             @db.VarChar(500)
  mainDepartmentId Int
  marketplaceId    String             @db.VarChar(100)
  googleFolderId   String             @db.VarChar(100)
  reports          Report[]
  departmentRanges DepartmentRanges[]

  @@map(name: "countries")
}

model Report {
  id                 Int                     @id @default(autoincrement())
  countryId          Int
  departmentId       Int
  timeframe          Timeframe
  endDay             DateTime                @db.Date
  verifiedAt         DateTime?
  downloadedAt       DateTime?
  checkedAt          DateTime?
  uploadedAt         DateTime?
  importedAt         DateTime?
  removedAt          DateTime?
  dataCheck          Json?
  amzRows            Int?
  gid                String?
  size               Int?
  attempt            Int                     @default(0)
  department         Department              @relation(fields: [departmentId], references: [id])
  country            Country                 @relation(fields: [countryId], references: [id])
  dailyAsinKeyword   UsDailyAsinKeywords[]
  weeklyAsinKeyword  UsWeeklyAsinKeywords[]
  monthlyAsinKeyword UsMonthlyAsinKeywords[]
  dailyRanks         UsDailyRanks[]
  weeklyRanks        UsWeeklyRanks[]
  monthlyRanks       UsMonthlyRanks[]

  @@unique([countryId, departmentId, timeframe, endDay], name: "departmentTimeframe")
  @@index([endDay], name: "endDayIndex")
  @@map(name: "reports")
}

model UsHistoryAsin {
  id        Int      @id @default(autoincrement())
  asinId    Int
  reviews   Int?
  rating    Int?
  price     Int
  crawledAt DateTime
  asin      UsAsin?  @relation(fields: [asinId], references: [id])

  @@map(name: "US_history_asins")
}

model UsAsin {
  id                 Int                     @id @default(autoincrement())
  name               String                  @db.VarChar(50)
  title              String?
  images             Json?
  brand              String?
  bullets            Json?
  dailyAsinKeyword   UsDailyAsinKeywords[]
  weeklyAsinKeyword  UsWeeklyAsinKeywords[]
  monthlyAsinKeyword UsMonthlyAsinKeywords[]
  usHistoryAsin      UsHistoryAsin[]

  @@unique([name], name: "asin")
  @@map(name: "US_asins")
}

model UsKeywords {
  id                 Int                     @id @default(autoincrement())
  sterm              String                  @db.VarChar(500)
  dailyRanks         UsDailyRanks[]
  weeklyRanks        UsWeeklyRanks[]
  monthlyRanks       UsMonthlyRanks[]
  dailyAsinKeyword   UsDailyAsinKeywords[]
  weeklyAsinKeyword  UsWeeklyAsinKeywords[]
  monthlyAsinKeyword UsMonthlyAsinKeywords[]

  @@unique([sterm], name: "kw")
  @@map(name: "US_keywords")
}

model UsDailyRanks {
  id           Int         @id @default(autoincrement())
  keywordId    Int
  rankV         Int
  departmentId Int
  reportId     Int
  keyword      UsKeywords? @relation(fields: [keywordId], references: [id])
  report       Report?     @relation(fields: [reportId], references: [id])

  @@unique([keywordId, departmentId, rankV, reportId], name: "dailyRank")
  @@index([departmentId], name: "rankDepIndex")
    @@index([reportId], name: "reportIndex")
  @@map(name: "US_daily_ranks")
}

model UsDailyAsinKeywords {
  id        Int         @id @default(autoincrement())
  asinId    Int
  keywordId Int
  asinRank  Int
  reportId  Int
  keyword   UsKeywords? @relation(fields: [keywordId], references: [id])
  asin      UsAsin?     @relation(fields: [asinId], references: [id])
  report    Report?     @relation(fields: [reportId], references: [id])

  @@unique([asinId, keywordId, reportId], name: "asinKeyword")
  @@index([keywordId], name: "kwIndex")
  @@index([reportId], name: "reportIndex")
  @@map(name: "US_daily_asin_keywords")
}

model UsWeeklyRanks {
  id           Int         @id @default(autoincrement())
  keywordId    Int
  rankV         Int
  departmentId Int
  reportId     Int
  keyword      UsKeywords? @relation(fields: [keywordId], references: [id])
  report       Report?     @relation(fields: [reportId], references: [id])

  @@unique([keywordId, departmentId, rankV, reportId], name: "weeeklyRank")
  @@index([departmentId], name: "rankDepIndex")
  @@index([reportId], name: "reportIndex")
  @@map(name: "US_weekly_ranks")
}

model UsWeeklyAsinKeywords {
  id        Int         @id @default(autoincrement())
  asinId    Int
  keywordId Int
  asinRank  Int
  reportId  Int
  keyword   UsKeywords? @relation(fields: [keywordId], references: [id])
  asin      UsAsin?     @relation(fields: [asinId], references: [id])
  report    Report?     @relation(fields: [reportId], references: [id])

  @@unique([asinId, keywordId, reportId], name: "asinKeyword")
  @@index([keywordId], name: "kwIndex")
  @@index([reportId], name: "reportIndex")
  @@map(name: "US_weekly_asin_keywords")
}

model UsMonthlyRanks {
  id           Int         @id @default(autoincrement())
  keywordId    Int
  rankV         Int
  departmentId Int
  reportId     Int
  keyword      UsKeywords? @relation(fields: [keywordId], references: [id])
  report       Report?     @relation(fields: [reportId], references: [id])

  @@unique([keywordId, departmentId, rankV,  reportId], name: "monthlyRank")
  @@index([reportId], name: "reportIndex")
  @@index([departmentId], name: "rankDepIndex")
  @@map(name: "US_monthly_ranks")
}

model UsMonthlyAsinKeywords {
  id        Int         @id @default(autoincrement())
  asinId    Int
  keywordId Int
  asinRank  Int
  reportId  Int
  keyword   UsKeywords? @relation(fields: [keywordId], references: [id])
  asin      UsAsin?     @relation(fields: [asinId], references: [id])
  report    Report?     @relation(fields: [reportId], references: [id])

  @@unique([asinId, keywordId, reportId], name: "asinKeyword")
  @@index([keywordId], name: "kwIndex")
  @@index([reportId], name: "reportIndex")
  @@map(name: "US_monthly_asin_keywords")
}

model KeywordRankTemp {
  id      Int    @id @default(autoincrement())
  keyword String @db.VarChar(500)
  rankV   Int

  @@map(name: "_keywordRankTemp")
}

model AsinKeywordRankTemp {
  id       Int    @id @default(autoincrement())
  asin     String @db.VarChar(50)
  asinRank Int
  keyword  String @db.VarChar(500)

  @@map(name: "_asinKeywordRankTemp")
}
